<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="DuyLePC" failures="0" tests="10" name="Default test" time="0.726" errors="0" timestamp="2025-03-10T22:58:38 GMT+07:00">
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.651">
    <failure type="java.lang.IllegalStateException" message="The path to the driver executable The path to the driver executable must be set by the webdriver.chrome.driver system property; for more information, see https://chromedriver.chromium.org/. The latest version can be downloaded from https://chromedriver.chromium.org/downloads">
      <![CDATA[java.lang.IllegalStateException: The path to the driver executable The path to the driver executable must be set by the webdriver.chrome.driver system property; for more information, see https://chromedriver.chromium.org/. The latest version can be downloaded from https://chromedriver.chromium.org/downloads
at org.openqa.selenium.internal.Require$StateChecker.nonNull(Require.java:314)
at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:149)
at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:41)
at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:285)
at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:456)
at org.openqa.selenium.chrome.ChromeDriverService.createServiceWithConfig(ChromeDriverService.java:160)
at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:71)
at wrapper.DriverFactory.createLocalChromeDriver(DriverFactory.java:44)
at wrapper.DriverFactory.createWebDriver(DriverFactory.java:32)
at wrapper.Driver.setDriver(Driver.java:25)
at TestCase.testArchitect.BaseTest.beforeMethodBase(BaseTest.java:22)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.internal.invokers.TestInvoker.runConfigMethods(TestInvoker.java:823)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:590)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@BeforeMethod beforeMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethodBase -->
  <testcase classname="TestCase.testArchitect.BaseTest" name="@AfterMethod afterMethodBase" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethodBase -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC01" time="0.0">
    <skipped/>
  </testcase> <!-- TC01 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC02" time="0.0">
    <skipped/>
  </testcase> <!-- TC02 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC03" time="0.0">
    <skipped/>
  </testcase> <!-- TC03 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC04" time="0.0">
    <skipped/>
  </testcase> <!-- TC04 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC05" time="0.0">
    <skipped/>
  </testcase> <!-- TC05 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC06" time="0.0">
    <skipped/>
  </testcase> <!-- TC06 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC07" time="0.0">
    <skipped/>
  </testcase> <!-- TC07 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC08" time="0.0">
    <skipped/>
  </testcase> <!-- TC08 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC09" time="0.0">
    <skipped/>
  </testcase> <!-- TC09 -->
  <testcase classname="TestCase.testArchitect.LoginTest" name="TC10" time="0.0">
    <skipped/>
  </testcase> <!-- TC10 -->
</testsuite> <!-- Default test -->
